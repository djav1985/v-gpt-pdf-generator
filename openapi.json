{
  "openapi": "3.1.0",
  "info": {
    "title": "PDF Generation API",
    "description": "A FastAPI application that generates PDFs from HTML and CSS content",
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "post": {
        "tags": [
          "PDF"
        ],
        "summary": "Create PDF",
        "description": "Generate a PDF file from HTML and CSS content.",
        "operationId": "create_pdf",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePDFRequest"
              },
              "example": {
                "pdf_title": "Example PDF",
                "contains_code": true,
                "body_content": "<p>Hello World</p>",
                "css_content": "p { color: blue; }",
                "output_filename": "example-pdf"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePDFResponse"
                },
                "example": {
                  "results": "PDF generation is complete. You can download it from the following URL:",
                  "url": "https://example.com/downloads/example-pdf.pdf"
                }
              }
            }
          },
          "403": {
            "description": "Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Invalid or missing API key"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/downloads/{filename}": {
      "get": {
        "tags": [
          "PDF"
        ],
        "summary": "Download Pdf",
        "operationId": "download_pdf_downloads__filename__get",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreatePDFRequest": {
        "properties": {
          "pdf_title": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Pdf Title",
            "description": "Title of the PDF document; will be used as both the <h1>$title</h1> in the body and the <title>$title</title>.",
            "example": "Example PDF"
          },
          "contains_code": {
            "type": "boolean",
            "title": "Contains Code",
            "description": "Indicates whether the 'body_content' includes code blocks. If set to true, the content may contain pre-formatted code blocks using <pre><code> tags. To include code blocks, wrap snippets in <pre><code>...</code></pre> tags and specify the language using a class attribute, e.g., <code class=\"language-python\"></code>.",
            "default": false,
            "example": true
          },
          "body_content": {
            "type": "string",
            "title": "Body Content",
            "description": "HTML content for the PDF body. This will be inserted inside the <body> element of the PDF document. Use the 'pdf_title' parameter to set the <h1> heading; do not include an <h1> tag in the 'body_content'. You can use standard HTML tags such as <h2>, <h3>, <h4>, <p>, <div>, <span>, <ul>, <ol>, <li>, <img>, <a>, <table>, <tr>, <th>, <td>, etc., to structure your content. Include classes and IDs within the HTML elements and use the 'css_content' parameter to apply custom styles. Images should use absolute URLs. Scripts and embedded forms are not supported.",
            "example": "<p>Hello World</p>"
          },
          "css_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Css Content",
            "description": "Optional CSS styles to format the 'body_content'. Supports standard selectors and properties but disallows '@import', 'url()' functions, and '<script>' tags.",
            "example": "p { color: blue; }"
          },
          "output_filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Filename",
            "description": "Optional filename for the generated PDF. Use lowercase letters, numbers, hyphens, or underscores. Path separators are not allowed and the '.pdf' extension is appended automatically.",
            "example": "example-pdf"
          }
        },
        "type": "object",
        "required": [
          "pdf_title",
          "body_content"
        ],
        "title": "CreatePDFRequest"
      },
      "CreatePDFResponse": {
        "properties": {
          "results": {
            "type": "string",
            "title": "Results"
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "results",
          "url"
        ],
        "title": "CreatePDFResponse"
      },
      "ErrorResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "ErrorResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "Provide the API key as a Bearer token",
        "bearerFormat": "API Key"
      }
    }
  },
  "tags": [
    {
      "name": "PDF",
      "description": "Operations for creating PDF documents."
    }
  ]
}